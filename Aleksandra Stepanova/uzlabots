# uzlabots: vēsture, restart poga, info(?) poga

# pievienot alfa-betta algoritmu no Genriha koda, nomainīt minimaksa + pirms katras spēles dod player izvēli pēc kura algoritma spēlēs AI
# NAV HEIRISTISKĀ FUNKCIJA
# NAV IZVĒLES KURŠ SĀK SPĒLI (pašlaik visu laiku pirmais izvēlas skaitli Player. Vajag pirms katras spēles dod izvēli player, kurš uzsāks spēli un izvēlēsies skaitli - player vai AI)
# ja uzreiz ir tā, ka skaitli nav iespējams sadalīt, tad it kā ir jāizvada paziņojums, kurš uzvarēja(?)


import pygame
import random
import math
from functools import partial


def generate_numbers():
    return random.sample(range(30000, 50001), 5)

def is_valid_division(num, divisor):
    return num is not None and num % divisor == 0

def calculate_points(num):
    points = 1 if num % 2 == 1 else -1
    bank = 1 if num % 10 in [0, 5] else 0
    return points, bank

def minimax(num, depth, is_maximizing, alpha, beta):
    if depth == 0 or not any(is_valid_division(num, d) for d in [2, 3, 4, 5]):
        return calculate_points(num)[0]

    if is_maximizing:
        max_eval = -math.inf
        for d in [2, 3, 4, 5]:
            if is_valid_division(num, d):
                eval = minimax(num // d, depth - 1, False, alpha, beta)
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = math.inf
        for d in [2, 3, 4, 5]:
            if is_valid_division(num, d):
                eval = minimax(num // d, depth - 1, True, alpha, beta)
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

def draw_text(text, x, y, size=32, color=(255, 255, 255)):
    font = pygame.font.SysFont("Verdana", size, bold=False)
    text_surface = font.render(text, True, color)
    text_rect = text_surface.get_rect(center=(x, y))
    screen.blit(text_surface, text_rect)

def draw_button(text, x, y, w, h, color, hover_color, disabled, action):
    mouse = pygame.mouse.get_pos()
    click = pygame.mouse.get_pressed()
    rect_color = hover_color if x < mouse[0] < x + w and y < mouse[1] < y + h and not disabled else color
    pygame.draw.rect(screen, rect_color, (x, y, w, h))
    draw_text(text, x + w // 2, y + h // 2, 24, (0, 0, 0))
    if click[0] == 1 and action and x < mouse[0] < x + w and y < mouse[1] < y + h and not disabled:
        pygame.time.delay(200)
        action()

def draw_rules():
    pygame.draw.rect(screen, (50, 50, 50), (100, 100, 600, 400))  
    pygame.draw.rect(screen, (255, 0, 0), (650, 110, 40, 40))  
    draw_text("X", 670, 130, 30, (255, 255, 255))  
    rules_text = [
        "Spēles noteikumi:",
        "",
        "Spēlētāji izdara gājienus pēc kārtas, katrā gājienā dalot pašreizējā ", 
        "brīdī esošu skaitli ar 2,3,4 vai 5. Skaitli ir iespējams sadalīt tikai ",
        "tajā gadījumā, ja rezultātā veidojas vesels skaitlis. Ja dalīšanas ",
        "rezultātā veidojas nepāra skaitlis, tad kopīgajam punktu skaitam tiek  ",
        "pieskaitīts 1 punkts, ja pāra skaitlis, tad no kopīgā punktu skaita tiek ",
        "atņemts viens punkts. Savukārt, ja tiek iegūts skaitlis, kas beidzas ar 0 ",
        "vai 5, tad bankai tiek pieskaitīts 1 punkts. Spēle beidzas, kad iegūto ",
        "skaitli vairs nav iespējams sadalīt. Ja kopīgais punktu skaits ir nepāra",
        "skaitlis, tad no tā atņem bankā uzkrātos punktus. Ja tas ir pāra skaitlis, ",
        "tad tam pieskaita bankā uzkrātos punktus. Ja kopīgā punktu skaita gala ",
        "vērtība ir nepāra skaitlis, uzvar spēlētājs, kas uzsāka spēli. Ja pāra ",        
        "skaitlis, tad otrais spēlētājs."
    ]
    for i, line in enumerate(rules_text):
        draw_text(line, 400, 140 + i * 25, 16, (255, 255, 255)) 

def toggle_rules():
    global show_rules
    show_rules = not show_rules

pygame.init()

WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Number Division Game")
font = pygame.font.SysFont("Verdana", 32, bold=False)
small_font = pygame.font.SysFont("Verdana", 24, bold=False)
show_rules = False  

def reset_game():
    global selected_number, starting_number, available_numbers, points, bank, player_turn, game_over, history, winner, choosing
    available_numbers = generate_numbers()
    selected_number = None
    starting_number = None
    points = 0
    bank = 0
    player_turn = True
    game_over = False
    history = []
    winner = None
    choosing = True
    
def check_game_over():
    global game_over, winner, points, bank
    if not any(is_valid_division(selected_number, d) for d in [2, 3, 4, 5]):
        game_over = True
        final_score = points - bank if points % 2 == 1 else points + bank
        winner = "AI Wins!" if final_score % 2 == 0 else "Player Wins!"
        history.append(f"Final Score: {final_score}")

def choose_number(num):
    global selected_number, starting_number, choosing
    selected_number = num
    starting_number = num  
    choosing = False
     
def divide_number(divisor):
    global selected_number, points, bank, player_turn
    if is_valid_division(selected_number, divisor) and player_turn:
        previous_number = selected_number
        selected_number //= divisor
        point_change, bank_change = calculate_points(selected_number)
        points += point_change
        bank += bank_change
        history.append(f"Player: {previous_number} / {divisor} = {selected_number} ({points} pts)")
        player_turn = False
        check_game_over()
        pygame.display.flip()

def ai_move():
    global selected_number, points, bank, player_turn
    best_move = None
    best_value = -math.inf
    for d in [2, 3, 4, 5]:
        if is_valid_division(selected_number, d):
            eval = minimax(selected_number // d, 3, False, -math.inf, math.inf)
            if eval > best_value:
                best_value = eval
                best_move = d
    if best_move:
        previous_number = selected_number
        selected_number //= best_move
        point_change, bank_change = calculate_points(selected_number)
        points += point_change
        bank += bank_change
        history.append(f"AI: {previous_number} / {best_move} = {selected_number} ({points} pts)")
    player_turn = True
    check_game_over()
    pygame.display.flip()

reset_game()

running = True
while running:
    screen.fill((30, 30, 30))
    draw_button("?", 750, 10, 40, 40, (200, 200, 200), (255, 255, 255), False, toggle_rules)
    draw_text(f"Starting Number: {starting_number if starting_number else 'Not chosen'}", WIDTH // 2, 20)
    draw_text(f"Current Number: {selected_number}", WIDTH // 2, 50)
    draw_text(f"Points: {points} | Bank: {bank}", WIDTH // 2, 90)
    for i, d in enumerate([2, 3, 4, 5]):
        disabled = not is_valid_division(selected_number, d)
        draw_button(f"/{d}", WIDTH // 2 - 130 + i * 75, 140, 50, 50, (100, 100, 100) if disabled else (100, 200, 100), (150, 255, 150), disabled, partial(divide_number, d))
    if choosing: 
        screen.fill((30, 30, 30))
        draw_text("Choose a starting number:", WIDTH // 2, 100, 36)
        for i, num in enumerate(available_numbers):
            draw_button(f"{num}", WIDTH // 2 - 50, 150 + i * 60, 100, 50, (200, 200, 200), (255, 255, 255), False, partial(choose_number, num))
                    
    if show_rules:
        draw_rules()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN and show_rules:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            if 650 <= mouse_x <= 690 and 110 <= mouse_y <= 150:
                show_rules = False  

    if game_over:
        draw_text(winner, WIDTH // 2, 220, 40, (255, 0, 0))
        draw_button("Restart", WIDTH // 2 - 50, HEIGHT - 100, 100, 50, (200, 200, 200), (255, 255, 255), False, reset_game)
    for i, event in enumerate(history[-10:]):
        draw_text(event, 400, 280 + i * 30, 24, (200, 200, 200))
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    if not player_turn and selected_number and not game_over:
        ai_move()
    pygame.display.flip()

pygame.quit()
